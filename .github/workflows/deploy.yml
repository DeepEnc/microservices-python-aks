name: CI/CD Pipeline

on:
  push:
    branches:
      - 0.1-develop

env:
  CLUSTER_NAME: k8s-cluster
  RESOURCE_GROUP: deepenc-cluster
  REGISTRY: ghcr.io
  LOCATION: eastus
  NODE_SIZE: Standard_D8ds_v5

jobs:
  lint:
    name: Linting and Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bash file
          # echo "<DOCKER_PASSWORD>" | docker login -u "<DOCKER_USERNAME>" --password-stdin
      
      - name: Lint Kubernetes Manifests
        uses: stackrox/kube-linter-action@v1.0.5
        with:
          directory: src
          format: plain
          output-file: linting_results.txt
        continue-on-error: true  # This allows the workflow to continue even if errors occur
        id: lint

      - name: Check Linter Output
        run: |
          if [[ -s linting_results.txt ]]; then
            echo "Linting errors found:"
            cat linting_results.txt
          else
            echo "No linting errors found."
          fi

      # - name: Install kubeval
      #   run: |
      #     curl -sLO https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
      #     tar xf kubeval-linux-amd64.tar.gz
      #     sudo mv kubeval /usr/local/bin/

      # Validate Kubernetes Manifests
      # - name: Validate Kubernetes Files
      #   run: |
      #     set -e
      #     for file in $(find src -type f -path '*/manifest/*.yaml'); do
      #       echo "Validating $file"
      #       kubeval "$file"
      #     done

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        
      - name: Lint Helm Charts
        run: |
          set -e
          for dir in helm-chart/*; do
            if [ -d "$dir" ] && [ -f "$dir/Chart.yaml" ]; then
              echo "Linting chart in $dir"
              helm lint "$dir"
            fi
          done

      - name: Upload Linting Errors Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linting-results
          path: linting_results.txt
        
  setup:
    name: Setup Azure and Kubernetes Context
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in with service principle to Azure
        run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET_ID }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: creating resource group
        run: |
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

      # - name: creating azure aks
      #   run: |
      #     az aks create --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --location ${{ env.LOCATION }} --kubernetes-version 1.28.3 --tier standard --enable-cluster-autoscaler --node-count 2 --min-count 2 --max-count 5 --max-pods 110 --node-vm-size ${{ env.NODE_SIZE }} --network-plugin azure --network-policy azure --load-balancer-sku standard --enable-addons monitoring --generate-ssh-keys

      - name: Check if AKS Cluster Exists
        id: aks_check
        run: |
          if az aks show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} > /dev/null 2>&1; then
            echo "AKS cluster already exists."
            echo "cluster_exists=true" >> $GITHUB_ENV
          else
            echo "AKS cluster does not exist."
            echo "cluster_exists=false" >> $GITHUB_ENV
          fi
      - name: Create AKS Cluster if it does not exist
        if: env.cluster_exists == 'false'
        run: |
          az aks create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --node-count 1 \
            --enable-addons monitoring \
            --generate-ssh-keys

      - name: connect to AKS cluster
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}  --file kubeconfig

        env:
            KUBECONFIG: ${{ github.workspace }}/kubeconfig  

      - name: Save kubeconfig
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Retrieve kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig
      
      - name: Set kubeconfig
        run: |
          export KUBECONFIG=$(pwd)/kubeconfig

      - name: Deploy Helm Charts for Databases
        run: |
          helm upgrade --install postgres helm-chart/Postgres \
            --namespace database --create-namespace

          helm upgrade --install rabbitmq helm-chart/RabbitMQ \
            --namespace database --create-namespace

          helm upgrade --install mongodb helm-chart/MongoDB \
            --namespace database --create-namespace

        # Step 5: Deploy Kubernetes manifests for services
      - name: Deploy Kubernetes Manifests for Services
        run: |
          for service in gateway-service converter-service notification-service auth-service; do
            kubectl apply -f src/$service/manifest
          done
  
        # Step 6: Verify Deployment Rollout (Optional)
      - name: Verify Deployment Rollout
        run: |
          for service in gateway-service converter-service notification-service auth-service; do
            kubectl rollout status deployment/$service-deployment -n $service
          done

      - name: Use kubeconfig
        run: |
          export KUBECONFIG=$(pwd)/kubeconfig
          kubectl get nodes