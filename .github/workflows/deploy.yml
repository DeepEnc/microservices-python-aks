name: CI/CD Pipeline

on:
  push:
    branches:
      - 0.1-develop

env:
  CLUSTER_NAME: k8s-cluster
  RESOURCE_GROUP: deepenc-cluster
  REGISTRY: ghcr.io
  LOCATION: eastus
  NODE_SIZE: Standard_D8ds_v5

jobs:
  lint:
    name: Linting and Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bash file
          # echo "<DOCKER_PASSWORD>" | docker login -u "<DOCKER_USERNAME>" --password-stdin
     
      - name: Create ../results directory for SARIF report files
        shell: bash
        run: mkdir -p ../results
      
      # - name: Find manifests directories
      #   run: |
      #     find ./src -type d -name "manifest" | tr '\n' ' ' > manifests_dirs.txt
      

      - name: Scan the files with kube-linter
        uses: stackrox/kube-linter-action@v1.0.5
        id: kube-linter-action-scan
        with:
          directory: ./src/auth-service/manifest           # $(cat manifests_dirs.txt)
          # config: .kube-linter/config.yaml
          format: sarif
          output-file: results/kube-linter.sarif
        continue-on-error: true

      - name: Upload SARIF Report file to Github
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/kube-linter.sarif

      - name: Verify kube-linter-action succeeded
        shell: bash
        run: |
          echo "If this step fails, kube-linter found issues. Check the output of the scan step above."
          [[ "${{ steps.kube-linter-action-scan.outcome }}" == "success" ]]

      - name: Validate Helm charts
        run: helm lint ./helm-chart
        
  # setup:
  #   name: Setup Azure and Kubernetes Context
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Log in with service principle to Azure
  #       run: |
  #         az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET_ID }} --tenant ${{ secrets.AZURE_TENANT_ID }}

  #     - name: creating resource group
  #       run: |
  #         az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

  #     - name: creating azure aks
  #       run: |
  #         az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
  #         az aks create --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --location ${{ env.LOCATION }} --kubernetes-version 1.28.3 --tier standard --enable-cluster-autoscaler --node-count 2 --min-count 2 --max-count 5 --max-pods 110 --node-vm-size ${{ env.NODE_SIZE }} --network-plugin azure --network-policy azure --load-balancer-sku standard --enable-addons monitoring --generate-ssh-keys

  #     - name: connect to AKS cluster
  #       run: |
  #         az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}

  #     - name: Save kubeconfig
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: kubeconfig
  #         path: .kube/config

  # deploy:
  #   name: Deploy to Kubernetes
  #   runs-on: ubuntu-latest
  #   needs: setup
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Retrieve kubeconfig
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: kubeconfig
  #         path: .kube/

  #     - name: Deploy Kubernetes Manifests
  #       run: |
  #         kubectl apply -f ./kubernetes-manifests

  #     - name: Verify Deployment
  #       run: |
  #         kubectl rollout status deployment/my-deployment -n production
  #         kubectl get all -n production
